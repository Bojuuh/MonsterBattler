### Full dev flow: populate, register/login, create hero, start battle, inspect logs

# basic ping
GET {{url}}/auth/test
Accept: application/json

###
# Populate DB with default monsters
GET {{url}}/monsters/populate
Accept: application/json

###
# Register user
POST {{url}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "username": "player1",
  "password": "secretpw"
}

###
# Login and save token
POST {{url}}/auth/login
Content-Type: application/json
Accept: application/json

{
  "username": "player1",
  "password": "secretpw"
}

> {%
    const body = JSON.parse(response.body);
    client.global.set("jwt_token", body.token);
    client.global.set("username", body.username);
    console.log("Token saved:", client.global.get("jwt_token"));
%}

###
# Create a hero for the logged-in user (no role required by default routes)
POST {{url}}/heroes
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Hero 1",
  "level": 1,
  "hp": 100,
  "attack": 12,
  "defense": 5,
  "xp": 0
}

> {%
    const body = JSON.parse(response.body);
    client.global.set("hero_id", body.id);
    console.log("Created hero id:", client.global.get("hero_id"));
%}

###
# List heroes
GET {{url}}/heroes
Accept: application/json

### Battle Test Variables
@hero_id = 1
@monster_id = 1

###
# Start a battle: use created hero and an existing monster id (1)
POST {{url}}/battles/start
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{jwt_token}}

{
  "heroId": {{hero_id}},
  "monsterId": {{monster_id}}
}

> {%
    const body = JSON.parse(response.body);
    client.global.set("battle_id", body.id);
    console.log("Battle id:", client.global.get("battle_id"));
%}

###
# List battles
GET {{url}}/battles
Accept: application/json
Authorization: Bearer {{jwt_token}}


###
### battle details test variable
@battle_id = 5
###
# Get last battle details
GET {{url}}/battles/{{battle_id}}/details
Accept: application/json
Authorization: Bearer {{jwt_token}}
